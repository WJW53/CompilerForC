// const addOpt = '+', subOpt = '-', mulOpt = '*', divOpt = '/';
const addOpt = ['+', '-'], mulOpt = ['*', '/','%'];
const relationOpt = ['<', '<=', '>', '>=', '!=', '=='];
const assignOpt = ['=','/=','*=','%=','+=','-=','<<=','>>=','&=','^=','|='];
//还有个逗号运算符呢?到时候直接写'表达式',',','表达式'吗
const smallLetters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',];
const bigLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
const idPre = [smallLetters, bigLetters, '_'];//标识符的前缀
const zero = 0;
const nonZero = [1, 2, 3, 4, 5, 6, 7, 8, 9];
const digit = [0, nonZero];
const digits = [digit];//闭包怎么写
const character = [addOpt, mulOpt, idPre, digit];
const string = [[idPre,string],''];



{/* <语句>→<复合语句>$<表达式语句>$<选择语句>$<循环语句>$<跳跃语句>
<表达式语句>→<';'>$<表达式><';'>
<选择语句>→<:><'('><表达式><')'><语句>$<'('><表达式><')'><语句><语句>
<循环语句>→<'('><表达式><')'><语句>$<'('><表达式语句><表达式语句><')'><语句>$<'('><表达式语句><表达式语句><表达式><')'><语句>
<跳跃语句>→CONTINUE<';'>$BREAK<';'>$RETURN<';'>$RETURN<表达式><';'>
<表达式>→<:><赋值表达式>$<表达式><','><赋值表达式>
<赋值表达式>→<条件表达式>$<赋值操作符><赋值表达式>
<条件表达式>→<逻辑或表达>$<逻辑或表达><'?'><表达式><':'><条件表达式>
<逻辑或表达>→<逻辑与表达>$<逻辑或表达或运算><逻辑表达式>
<逻辑与表达>:<或表达式>$<逻辑表达式>和<运算或表达式>
<或运算表达式>→<异或表达式>$<或运算表达式><'>$<'><异或表达式>
<异或表达式>:<与表达式>$<异或表达式><'^'><与表达式>
<与表达式>:<相等表达式>$<与表达式><'&'><相等表达式>
<相等表达式>:<关系表达式>$<相等表达式等于运算关系表达式>$<相等表达式不等于运算关系表达式>
<关系表达式>:<移位表达式>$<关系表达式><'<'><移位表达式>$<关系表达式><'>'><移位表达式>$<关系表达式小于等于运算移位表达式>$<关系表达式大于等于运算移位表达式>
<移位表达式>:<加法表达式>$<移位表达式左运算加法表达式>$<移位表达式右运算加法表达式>
<加法表达式></加法表达式>:<乘法表达式>$<加法表达式><'+'><乘法表达式>$<加法表达式><'-'><乘法表达式>
<乘法表达式>:<强制转换表达式>$<乘法表达式><'><强制转换表达式>$<乘法表达式><'/'><强制转换表达式>$<乘法表达式><'%'><强制转换表达式>
<强制转换表达式>:<'('><类型名称><')'><强制转换表达式>
<基本表达式>→<标识符>$<常量>$<字符串常量>$<'('><表达式><')'>
<赋值运算符>→<'='> */}

